class Solution(object):
    def strongPasswordChecker(self, password):
        """
        :type password: str
        :rtype: int
        """
        n = len(password)
        has_lower = any(c.islower() for c in password)
        has_upper = any(c.isupper() for c in password)
        has_digit = any(c.isdigit() for c in password)
        
        missing_type = 3 - (has_lower + has_upper + has_digit)
        
        one = two = replace = 0
        i = 2
        while i < n:
            if password[i-2] == password[i-1] == password[i]:
                length = 2
                while i+1 < n and password[i] == password[i+1]:
                    i += 1
                    length += 1
                if length % 3 == 0: one += 1
                elif length % 3 == 1: two += 1
                replace += length // 3
            i += 1
        
        if n < 6:
            return max(missing_type, 6 - n)
        elif n <= 20:
            return max(missing_type, replace)
        else:
            delete = n - 20
            replace -= min(delete, one)
            replace -= min(max(delete - one, 0), two * 2) // 2
            replace -= max(delete - one - 2 * two, 0) // 3
            return delete + max(missing_type, replace)
